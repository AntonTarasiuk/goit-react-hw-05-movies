{"version":3,"file":"static/js/523.41f88bf1.chunk.js","mappings":"sPAEaA,EAAYC,EAAAA,EAAAA,GAAH,0P,mBCGTC,EAAY,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACxB,GAAgCC,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,MAEAC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAeL,EAAMM,IAAIC,MAAK,SAAAC,GAAO,OAAcL,EAAVK,EAAsBA,EAAQC,UAAyB,SACjG,CAACT,EAAMM,KAEV,IAAMI,EAAkB,KAAZR,EAAA,yCAAmDA,GAAaS,EAE5E,OACI,UAACd,EAAD,YACI,gBAAKe,IAAKF,EAAKG,IAAI,GAAGC,MAAO,OAC7B,uBAAId,EAAMe,QACV,uBAAIf,EAAMgB,gBChBTC,EAAWnB,EAAAA,EAAAA,GAAH,mECoBrB,EAfa,WACT,IAAQoB,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBjB,EAAAA,EAAAA,UAAS,IAAjC,eAAOmB,EAAP,KAAaC,EAAb,KAMA,OAJAjB,EAAAA,EAAAA,YAAU,YACNkB,EAAAA,EAAAA,IAAgBJ,GAASX,MAAK,SAAAgB,GAAa,OAAIF,EAAQE,QACxD,CAACL,KAEG,SAACD,EAAD,UACFG,EAAKI,KAAI,SAAAxB,GAAK,OACX,SAACD,EAAD,CAA0BC,MAAOA,GAAjBA,EAAMM,W,iOCblCmB,IAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAEHC,EAAc,mCAAG,WAAOC,EAAaC,GAApB,uFACHJ,GAAAA,CAAM,gBAAiB,CAC1CK,OAAQ,CACJC,QAASL,EACTM,SAAU,QACVC,MAAOL,EACPC,KAAAA,KANkB,cACpBK,EADoB,yBAWnBA,EAASC,MAXU,2CAAH,wDAedC,EAAiB,mCAAG,oGACNX,GAAAA,CAAM,mBAAoB,CAC7CK,OAAQ,CACJC,QAASL,EACTM,SAAU,WAJW,cACvBE,EADuB,yBAOtBA,EAASC,MAPa,2CAAH,qDAUjBE,EAAe,mCAAG,WAAO/B,GAAP,uFACJmB,GAAAA,CAAM,SAAD,OAAUnB,GAAM,CACxCwB,OAAQ,CACJC,QAASL,EACTM,SAAU,WAJS,cACrBE,EADqB,yBAOpBA,EAASC,MAPW,2CAAH,sDAUfb,EAAe,mCAAG,WAAOhB,GAAP,uFACJmB,GAAAA,CAAM,SAAD,OAAUnB,EAAV,YAAwB,CAChDwB,OAAQ,CACJC,QAASL,EACTM,SAAU,WAJS,cACrBE,EADqB,yBAOpBA,EAASC,KAAKf,MAPM,2CAAH,sDAUff,EAAc,mCAAG,WAAOC,GAAP,uFACHmB,GAAAA,CAAM,UAAD,OAAWnB,EAAX,WAAwB,CAChDwB,OAAQ,CACJC,QAASL,KAHS,cACpBQ,EADoB,yBAOnBA,EAASC,KAAKG,SAAS,IAPJ,2CAAH,sDAUdC,EAAiB,mCAAG,WAAOjC,GAAP,uFACNmB,GAAAA,CAAM,SAAD,OAAUnB,EAAV,YAAwB,CAChDwB,OAAQ,CACJC,QAASL,EACTM,SAAU,WAJW,cACvBE,EADuB,yBAOtBA,EAASC,KAAKK,SAPQ,2CAAH,uD","sources":["components/Actor/Actor.styled.jsx","components/Actor/Actor.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/apiGetMovies/apiGetMovies.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const ActorItem = styled.li`\n    display: inline-block;\n    font-size: 15px;\n    width: 200px;\n    padding: 5px;\n    border: 1px solid black;\n    border-radius: 5px;\n\n    :not(:last-child) {\n    margin-bottom: 5px;\n    margin-right: 5px;\n    }\n`","import { useState, useEffect } from \"react\";\nimport { apiGetActorPic } from \"services/apiGetMovies/apiGetMovies\";\nimport { ActorItem } from \"./Actor.styled\";\nimport noPoster from \"../../poster-holder.jpg\";\n\nexport const ActorInfo = ({ actor }) => {\n    const [actorPic, setActorPic] = useState('');\n    \n    useEffect(() => {\n        apiGetActorPic(actor.id).then(picture => picture ? setActorPic(picture.file_path) : setActorPic(''))\n    }, [actor.id])\n    \n    const url = actorPic !=='' ? `https://image.tmdb.org/t/p/w200${actorPic}` : noPoster;\n    \n    return (\n        <ActorItem>\n            <img src={url} alt=\"\" width={200}/>\n            <p>{actor.name}</p>\n            <p>{actor.character}</p>\n        </ActorItem>\n    )\n}","import styled from \"@emotion/styled\";\n\nexport const CastList = styled.ul`\n    displey: flex;\n    list-style: none;\n`","import { useState, useEffect } from \"react\"\nimport { useParams } from \"react-router-dom\";\nimport { ActorInfo } from \"components/Actor/Actor\";\nimport { CastList } from \"./Cast.styled\";\n\nimport { apiGetMovieCast } from \"services/apiGetMovies/apiGetMovies\"\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState([]);\n\n    useEffect(() => {\n        apiGetMovieCast(movieId).then(castMovieById => setCast(castMovieById))\n    }, [movieId])\n\n    return <CastList>\n        {cast.map(actor => \n            <ActorInfo key={actor.id} actor={actor} />\n        )}\n    </CastList>\n}\n\nexport default Cast;","import axios from \"axios\";\n\n// import useState from './re'\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '1691901ed2ae3d246dfa1eabb74d344d';\n\nexport const apiMovieSearch = async (searchQuery, page) => {\n    const response = await axios(`search/movie/`, {\n        params: {\n            api_key: API_KEY,\n            language: 'en-US',\n            query: searchQuery,\n            page, \n\n        }\n    });\n    // console.log(response.data);\n    return response.data;\n}\n\n\nexport const apiTrandingMovies = async () => {\n    const response = await axios(`trending/all/day`, {\n        params: {\n            api_key: API_KEY,\n            language: 'en-US',\n        }\n    });\n    return response.data;\n}\n\nexport const apiGetMovieById = async (id) => {\n    const response = await axios(`movie/${id}`, {\n        params: {\n            api_key: API_KEY,\n            language: 'en-US',\n        }\n    });\n    return response.data;\n}\n\nexport const apiGetMovieCast = async (id) => {\n    const response = await axios(`movie/${id}/credits`, {\n        params: {\n            api_key: API_KEY,\n            language: 'en-US',\n        }\n    });\n    return response.data.cast;\n}\n\nexport const apiGetActorPic = async (id) => {\n    const response = await axios(`person/${id}/images`, {\n        params: {\n            api_key: API_KEY,\n        }\n    });\n    // console.log(response.data.profiles)\n    return response.data.profiles[0];\n}\n\nexport const apiGetReviewsById = async (id) => {\n    const response = await axios(`movie/${id}/reviews`, {\n        params: {\n            api_key: API_KEY,\n            language: 'en-US',\n        }\n    });\n    return response.data.results;\n}"],"names":["ActorItem","styled","ActorInfo","actor","useState","actorPic","setActorPic","useEffect","apiGetActorPic","id","then","picture","file_path","url","noPoster","src","alt","width","name","character","CastList","movieId","useParams","cast","setCast","apiGetMovieCast","castMovieById","map","axios","API_KEY","apiMovieSearch","searchQuery","page","params","api_key","language","query","response","data","apiTrandingMovies","apiGetMovieById","profiles","apiGetReviewsById","results"],"sourceRoot":""}